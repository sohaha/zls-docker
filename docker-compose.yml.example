version: '3'

networks:
  defNetworks:
    driver: bridge
    ipam:
      config:
        - subnet: 172.0.0.0/24

services:
  ### node ##########
  node:
    build:
      context: ./config/node/
      args:
        NODE_IMAGES: ${NODE_IMAGES}
    environment:
      TZ: Asia/Shanghai
    volumes:
      - ${SOURCE_DIR}:/var/www/html/:rw
    networks:
      - defNetworks

  ### go ##########
  go:
    build:
      context: ./config/golang/
      args:
        GO_IMAGES: ${GO_IMAGES}
    volumes:
      - ${SOURCE_DIR}:/var/www/html/:rw
    environment:
      TZ: Asia/Shanghai
    networks:
      - defNetworks

  ### nginx ##########
  nginx:
    build:
      context: ./config/nginx/
      args:
        NGINX_IMAGES: ${NGINX_IMAGES}
    ports:
      - '${NGINX_HTTP_HOST_PORT}:80'
      - '${NGINX_HTTPS_HOST_PORT}:443'
    volumes:
      - ${SOURCE_DIR}:/var/www/html/:rw
      - ${NGINX_LOG_DIR}:/var/log/nginx/:rw
      - ${NGINX_CONFD_DIR}:/etc/nginx/conf.d/:rw
      - ${LUA_DIR}:/usr/local/openresty/nginx/conf/lua:rw
      - ${NGINX_CONF_FILE}:/etc/nginx/nginx.conf:ro
    restart: always
    depends_on:
      - php
    environment:
      MYSQL_ROOT_PASSWORD: '${MYSQL_ROOT_PASSWORD}'
      REDIS_PASSWORD: '${REDIS_PASSWORD}'
      TZ: Asia/Shanghai
    networks:
      defNetworks:
        ipv4_address: 172.0.0.10

  ### php ##########
  php:
    build:
      context: ./config/php/
      args:
        PHP_IMAGES: ${PHP_IMAGES}
        ALPINE_REPOSITORIES: ${ALPINE_REPOSITORIES}
        PHP_EXTENSIONS: ${PHP_EXTENSIONS}
        COMPOSER_VERSION: ${COMPOSER_VERSION}
        COMPOSER_PACKAGIST: ${COMPOSER_PACKAGIST}
        MORE_EXTENSION_INSTALLER: php.sh
    volumes:
      - ${SOURCE_DIR}:/var/www/html/:rw
      - ${PHP_PHP_CONF_FILE}:/usr/local/etc/php/php.ini:ro
      - ${PHP_FPM_CONF_FILE}:/usr/local/etc/php-fpm.d/www.conf:rw
      - ${PHP_LOG_DIR}:/var/log/php
      - ${COMPOSER_DATA_DIR}:/composer:rw
      - ${NGINX_CONFD_DIR}:/etc/nginx/conf.d/:rw
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: '${MYSQL_ROOT_PASSWORD}'
      REDIS_PASSWORD: '${REDIS_PASSWORD}'
      TZ: Asia/Shanghai
    cap_add:
      - SYS_PTRACE
    networks:
      defNetworks:
        ipv4_address: 172.0.0.30
    extra_hosts:
      - 'nginx.docker:172.0.0.10'
    security_opt:
      - 'seccomp=./config/php/seccomp.json'

  ### mysql ##########
  mysql:
    build:
      context: ./config/mysql/
      args:
        MYSQL_IMAGES: ${MYSQL_IMAGES}
    ports:
      - '${MYSQL_HOST_PORT}:3306'
    volumes:
      - ${MYSQL_CONF_FILE}:/etc/mysql/conf.d/mysql.cnf:ro
      - ${MYSQL_DATA_DIR}:/var/lib/mysql/:rw
      - ${MYSQL_CONF_DIR}:/mysql/:rw
    restart: always
    networks:
      defNetworks:
        ipv4_address: 172.0.0.20
    environment:
      MYSQL_ROOT_PASSWORD: '${MYSQL_ROOT_PASSWORD}'
      MYSQL_DATABASE: '${MYSQL_DATABASE}'
      TZ: Asia/Shanghai

  ### redis ##########
  redis:
    build:
      context: ./config/redis/
      args:
        REDIS_IMAGES: ${REDIS_IMAGES}
    ports:
      - '${REDIS_HOST_PORT}:6379'
    volumes:
      - ${REDIS_CONF_FILE}:/etc/redis.conf:ro
    restart: always
    environment:
      TZ: Asia/Shanghai
    entrypoint:
      ['redis-server', '/etc/redis.conf', '--requirepass', '${REDIS_PASSWORD}']
    networks:
      defNetworks:
        ipv4_address: 172.0.0.40

  ### mongodb ##########
  mongodb:
    build:
      context: ./config/mongodb/
      args:
        MONGODB_IMAGES: ${MONGODB_IMAGES}
    environment:
      MONGO_INITDB_ROOT_USERNAME: '${MONGODB_INITDB_ROOT_USERNAME}'
      MONGO_INITDB_ROOT_PASSWORD: '${MONGODB_INITDB_ROOT_PASSWORD}'
      TZ: Asia/Shanghai
    volumes:
      - ${MONGODB_DATA_DIR}:/data/db:rw
      - ${MONGODB_DATA_DIR}/mongo_key:/mongo:rw
    ports:
      - '${MONGODB_HOST_PORT}:27017'
    networks:
      - defNetworks
    command: --auth

  ### sentry ##########
  sentry:
    image: ${SENTRY_IMAGES}
    depends_on:
      - redis
      - postgres
      - sentry_celery_beat
      - sentry_celery_worker
    ports:
      - ${SENTRY_PORT}:9000
    environment:
      SENTRY_SECRET_KEY: '${SENTRY_SECRET_KEY}'
      SENTRY_REDIS_HOST: 'redis'
      SENTRY_POSTGRES_HOST: 'postgres'
      SENTRY_DB_USER: '${POSTGRES_USER}'
      SENTRY_DB_PASSWORD: '${POSTGRES_PASSWORD}'
      TZ: Asia/Shanghai
    cap_add:
      - SYS_PTRACE
    networks:
      - defNetworks

  sentry_celery_beat:
    image: ${SENTRY_IMAGES}
    depends_on:
      - redis
      - postgres
    command: 'sentry run cron'
    environment:
      SENTRY_SECRET_KEY: '${SENTRY_SECRET_KEY}'
      SENTRY_REDIS_HOST: 'redis'
      SENTRY_POSTGRES_HOST: 'postgres'
      SENTRY_DB_USER: '${POSTGRES_USER}'
      SENTRY_DB_PASSWORD: '${POSTGRES_PASSWORD}'
    cap_add:
      - SYS_PTRACE
    networks:
      - defNetworks

  sentry_celery_worker:
    image: ${SENTRY_IMAGES}
    depends_on:
      - redis
      - postgres
    links:
      - redis
      - postgres
    command: 'sentry run worker'
    environment:
      SENTRY_SECRET_KEY: '${SENTRY_SECRET_KEY}'
      SENTRY_REDIS_HOST: 'redis'
      SENTRY_POSTGRES_HOST: 'postgres'
      SENTRY_DB_USER: '${POSTGRES_USER}'
      SENTRY_DB_PASSWORD: '${POSTGRES_PASSWORD}'
    cap_add:
      - SYS_PTRACE
    networks:
      - defNetworks

  ### postgres ##########
  postgres:
    build:
      context: ./config/postgres
      args:
        POSTGRES_IMAGES: ${POSTGRES_IMAGES}
    ports:
      - '${POSTGRES_PORT}:5432'
    volumes:
      - ${POSTGRES_DATA_DIR}:/var/lib/postgresql/data:rw
    restart: always
    environment:
      POSTGRES_DB: '${POSTGRES_DB}'
      POSTGRES_USER: '${POSTGRES_USER}'
      POSTGRES_PASSWORD: '${POSTGRES_PASSWORD}'
      #PGDATA: /tmp
      TZ: Asia/Shanghai
    networks:
      - defNetworks

  ### portainer ##########
  portainer:
    image: ${PORTAINER_IMAGES}
    command: -H unix:///var/run/docker.sock
    restart: always
    ports:
      - '${PORTAINER_HOST_PORT}:9000'
    environment:
      TZ: Asia/Shanghai
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${PORTAINER_DATA_DIR}:/data

  ### yapi ##########
  yapi:
    build:
      context: ./config/yapi/
      args:
        YAPI_VERSION: ${YAPI_VERSION}
        YAPI_HOME: ${YAPI_HOME}
        YAPI_HOST_PORT: ${YAPI_HOST_PORT}
        NODE_IMAGES: ${NODE_IMAGES}
    restart: always
    environment:
      TZ: Asia/Shanghai
    ports:
      - '${YAPI_HOST_PORT}:8005'
      #- "9090:9090"
    volumes:
      - ${YAPI_CONFIG_FILE}:/home/vendors/config.json:rw
      - ${YAPI_CONFIG_FILE}:/home/config.json:rw
      - ${YAPI_LOG_DIR}:/home/log
    depends_on:
      - mongodb
    cap_add:
      - SYS_PTRACE
    networks:
      - defNetworks

  ### drone ##########
  # 配置文档 https://docs.drone.io/server/overview/
  drone:
    image: drone/drone:1
    volumes:
      - ./data/drone:/var/lib/drone/
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      # 使用 gitlab，应用回调地址 {DRONE_SERVER_HOST}/login
      - DRONE_GITLAB=true
      - DRONE_GITLAB_CLIENT_ID=xxx
      - DRONE_GITLAB_CLIENT_SECRET=xxx
      - DRONE_GITLAB_SERVER=http://gitlab.xxx.com
      - DRONE_GITLAB_SKIP_VERIFY=true
      # 输出日志
      - DRONE_LOGS_DEBUG=true
      - DRONE_OPEN=true
      # 访问域名或 IP
      - DRONE_SERVER_HOST=drone.xxx.com
      # https 还是 http
      - DRONE_SERVER_PROTO=https
      # Drone Server 和 Agent 的通信密钥，一个随机的长字符串
      - DRONE_RPC_SECRET=QWASFGTTG767TU4345435
      - DRONE_AGENTS_ENABLED=true
    networks:
      defNetworks:
        ipv4_address: 172.0.0.11
    depends_on:
      - drone-runner

  drone-runner:
    image: drone/drone-runner-docker:1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - DRONE_RPC_PROTO=http
      - DRONE_RPC_HOST=drone
      - DRONE_RPC_SECRET=QWASFGTTG767TU4345435
      - DRONE_RUNNER_CAPACITY=2
      - DRONE_RUNNER_NAME=drone-runner
    networks:
      - defNetworks


  ### monitor ##########
  grafana:
    image: ${GRAFANA_IMAGES}
    restart: always
    ports:
      - '${GRAFANA_PORT}:3000'
    environment:
      TZ: Asia/Shanghai
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
    networks:
      - defNetworks
    depends_on:
      - prometheus
      - mysqlexporter
    volumes: 
      - ${GRAFANA_CONFIG_FILE}:/etc/grafana/grafana.ini:ro
      - ${GRAFANA_LOG_DIR}:/var/log/grafana:rw
      - ${GRAFANA_DATA_DIR}:/var/lib/grafana:rw
  prometheus:
    image: ${PROM_IMAGES}
    restart: always
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    environment:
      TZ: Asia/Shanghai
    networks:
      - defNetworks
    ports:
      - '${PROM_PORT}:9090'
    volumes: 
      - ${PROM_CONFIG_FILE}:/etc/prometheus/prometheus.yml
      - ${PROM_DATA_DIR}:/prometheus
  mysqlexporter:
    image: prom/mysqld-exporter:v0.12.1
    networks:
      - defNetworks
    environment:
      - DATA_SOURCE_NAME=root:${MYSQL_ROOT_PASSWORD}@(mysql:3306)/
